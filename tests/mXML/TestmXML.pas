unit TestmXML;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  Classes, SysUtils, mXML, mUtility, mFloatsManagement
  {$IFNDEF FPC}, IOUtils, TestFramework
  {$ELSE}
  ,fpcunit, testutils, testregistry
  {$ENDIF};

type
  // Test methods for class TmXmlDocument

  TestTmXmlDocument = class(TTestCase)
  strict private
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestSimpleSaveAndLoad;
    procedure TestCursor;
  end;

implementation

procedure TestTmXmlDocument.SetUp;
begin
end;

procedure TestTmXmlDocument.TearDown;
begin
end;

procedure TestTmXmlDocument.TestCursor;
var
  tempCursor : TmXmlElementCursor;
  FmXmlDocument : TmXmlDocument;
  TempFileName : string;
  i : integer;
begin
  FmXmlDocument := TmXmlDocument.Create;
  try
    FmXmlDocument.CreateRootElement('root');
    for i := 0 to 9 do
    begin
      FmXmlDocument.RootElement.AddElement('subitem').SetAttribute('key', IntToStr(i));
    end;
    {$IFDEF FPC}
    TempFileName := SysUtils.GetTempFileName;
    {$ELSE}
    TempFileName := TPath.GetTempFileName;
    {$ENDIF}
    FmXMLDocument.SaveToFile(TempFileName);
    {$IFNDEF FPC}
    Status(TempFileName);
    {$ENDIF}
  finally
    FmXmlDocument.Free;
  end;
  FmXmlDocument := TmXmlDocument.Create;
  try
    FmXmlDocument.LoadFromFile(TempFileName);
    tempCursor := TmXmlElementCursor.Create(FmXmlDocument.RootElement, 'subitem');
    try
      CheckEquals(tempCursor.Count, 10);
      for I := 0 to tempCursor.Count - 1 do
      begin
        CheckEquals(tempCursor.Elements[i].GetAttribute('key'), IntToStr(i));
      end;
    finally
      tempCursor.Free;
    end;

    for i := 0 to 9 do
    begin
      FmXmlDocument.RootElement.AddElement('subitem').SetAttribute('key', IntToStr(i));
    end;
  finally
    FmXmlDocument.Free;
  end;

end;

procedure TestTmXmlDocument.TestSimpleSaveAndLoad;
var
  FmXmlDocument : TmXmlDocument;
  TempFileName : string;
  DateTimeValue : TDateTime;
begin
  FmXmlDocument := TmXmlDocument.Create;
  try
    FmXmlDocument.CreateRootElement('root_element').SetAttribute('key', 'value');
    CheckTrue(FmXmlDocument.RootElement <> nil);
    CheckTrue(FmXMLDocument.RootElement.HasAttribute('key'));
    CheckEquals('value', FmXmlDocument.RootElement.GetAttribute('key'));
    DateTimeValue := Now;
    FmXmlDocument.RootElement.SetDateTimeAttribute('time', DateTimeValue);
    CheckTrue(DoublesAreEqual(DateTimeValue, FmXmlDocument.RootElement.GetDateTimeAttribute('time'), 4),
      FloatToStr(DateTimeValue) + ' is not ' + FloatToStr(FmXmlDocument.RootElement.GetDateTimeAttribute('time')));
    FmXmlDocument.RootElement.AddElement('child1').SetAttribute('key1', 'value1');
    FmXmlDocument.RootElement.AddElement('child2').SetAttribute('key2', 'value2');
    {$IFDEF FPC}
    TempFileName := SysUtils.GetTempFileName;
    {$ELSE}
    TempFileName := TPath.GetTempFileName;
    {$ENDIF}
    FmXMLDocument.SaveToFile(TempFileName);
    {$IFNDEF FPC}
    Status(TempFileName);
    {$ENDIF}
  finally
    FmXmlDocument.Free;
  end;
  FmXmlDocument := TmXmlDocument.Create;
  try
    FmXmlDocument.LoadFromFile(TempFileName);
    CheckTrue(FmXmlDocument.RootElement <> nil);
    CheckTrue(FmXMLDocument.RootElement.HasAttribute('key'));
    CheckEquals('value', FmXmlDocument.RootElement.GetAttribute('key'));
    CheckTrue(DoublesAreEqual(DateTimeValue, FmXmlDocument.RootElement.GetDateTimeAttribute('time'),4));
  finally
    FmXmlDocument.Free;
  end;

end;

initialization
  // Register any test cases with the test runner
  {$IFDEF FPC}
  RegisterTest(TestTmXmlDocument);
  {$ELSE}
  RegisterTest(TestTmXmlDocument.Suite);
  {$ENDIF}
end.

